{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Comently is a Headless Comments Management System (Headless CMS for the friends, what a coincidence!), is basically a platform that provides you with reddit-like commenting system as a service, just like Disqus, but without a Frontend, just the API, that can be integrated seamlessly with your existing Backend. Key features Zero friction for your users : Your users will never need to create an extra account just for commenting, they will be able to comment on your website using the same account they use for your website, or without account if you want to allow that. Zero friction for the developers : You can orchestrate all the commenting logic from your Backend, using a simple API that you can learn to use in 30 minutes. No setup required : You don't need to install anything, just use the API and you are ready to go. Support for mentions : We scan the comments for @mentions and automatically link them to your users. Our API is available in RapidAPI, you can subscribe to the free limited plan for play around with it. Target audience This service has been designed to be used by developers who want to integrate the commenting system into their existing Backend. This differs from other providers like Disqus, where you need to have a Frontend to integrate their javascript based plugins, and where you does not have control over the users nor the autentication of those. So if for example, you are building a custom platform for x or y stuff, and you want to allow your users to comment, but you dont want to create the comments system yourself nor give the control of the comments to an external provider, this service will suit you perfectly. You will be in control and orchestrate all the flows, but without worry about implementation details. You can have a better overview by visiting the Intended usage of the API section. Quickstart Register in RapidAPI Go to the API home page Subscribe to the free plan Get your access token From the Developers Dashboard , select the default aplication (or you desired one) and go to security tab, then create or reveal the key. Use the key to make a request to the API curl --request GET \\ --url 'https://comently.p.rapidapi.com/comments?reference_id=ref' \\ --header 'x-rapidapi-key: <insert-your-token-here>' If you copy paste the curl request, remember to insert the access token. Congratulations, you are ready to use the API! URL of the API The current URL of the API is a subdomain the RapidAPI service: https://comently.p.rapidapi.com/ All the API routes are exposed on that subdomain.","title":"Introduction"},{"location":"#key-features","text":"Zero friction for your users : Your users will never need to create an extra account just for commenting, they will be able to comment on your website using the same account they use for your website, or without account if you want to allow that. Zero friction for the developers : You can orchestrate all the commenting logic from your Backend, using a simple API that you can learn to use in 30 minutes. No setup required : You don't need to install anything, just use the API and you are ready to go. Support for mentions : We scan the comments for @mentions and automatically link them to your users. Our API is available in RapidAPI, you can subscribe to the free limited plan for play around with it.","title":"Key features"},{"location":"#target-audience","text":"This service has been designed to be used by developers who want to integrate the commenting system into their existing Backend. This differs from other providers like Disqus, where you need to have a Frontend to integrate their javascript based plugins, and where you does not have control over the users nor the autentication of those. So if for example, you are building a custom platform for x or y stuff, and you want to allow your users to comment, but you dont want to create the comments system yourself nor give the control of the comments to an external provider, this service will suit you perfectly. You will be in control and orchestrate all the flows, but without worry about implementation details. You can have a better overview by visiting the Intended usage of the API section.","title":"Target audience"},{"location":"#quickstart","text":"Register in RapidAPI Go to the API home page Subscribe to the free plan Get your access token From the Developers Dashboard , select the default aplication (or you desired one) and go to security tab, then create or reveal the key. Use the key to make a request to the API curl --request GET \\ --url 'https://comently.p.rapidapi.com/comments?reference_id=ref' \\ --header 'x-rapidapi-key: <insert-your-token-here>' If you copy paste the curl request, remember to insert the access token. Congratulations, you are ready to use the API!","title":"Quickstart"},{"location":"#url-of-the-api","text":"The current URL of the API is a subdomain the RapidAPI service: https://comently.p.rapidapi.com/ All the API routes are exposed on that subdomain.","title":"URL of the API"},{"location":"create-comment-with-user/","text":"Now we will create a comment that was writen by an user, in the previous chapter we registered a user called whitman with an id 123456789 , lets create a comment with the user whitman: curl --request POST \\ --url https://comently.p.rapidapi.com/comments \\ --header 'x-rapidapi-key: <your-token>' \\ --data '{ \"body\": \"Test comment!!\", \"reference_id\": \"test-reference-id\", \"user_id\": \"123456789\" }' Notice the new parameter \"user_id\" that we added, this is the id of the user that wrote the comment, this is the same id that we registered in the previous chapter. The response will be the following: { \"id\" : \"d34a8e8c-fc1d-46a3-8873-6230f28c80c6\" , \"body\" : \"Test comment!!\" , \"parent_id\" : null , \"reference_id\" : \"test-reference-id\" , \"created_at\" : \"2021-09-12T18:33:29.260283\" , \"user\" : { \"user_id\" : \"123456789\" , \"name\" : \"whitman\" }, \"mentions\" : [] } Now the user key is not null.","title":"Comment with an user"},{"location":"creating-your-first-comment/","text":"The principal entity of this API is the Comment, a comment is asociated with a kind of parent depending on what your bussiness does. For example, if you have a blog where users can comment on posts, the parent of the comment will be the post. We reference this parent from each comment using the reference_id that is some kind of unique identifier for the parents, in the blog example, the post id or the slug are natural candidates. With the last explanation we have enought knowledge to create our first comment! curl --request POST \\ --url https://comently.p.rapidapi.com/comments \\ --header 'x-rapidapi-key: <your-token>' \\ --data '{ \"body\": \"Test comment!!\", \"reference_id\": \"test-reference-id\" }' The reference_id allows you to organize and group the comments of your platform more efficiently. They are just plain strings, so this can flexible enough for a lot of uses cases, for example if your blogs are identified using and UUID, you can convert it to string and use it as reference_id , or if you use the post slug, that is already a string. The response of the last request will be something like this: { \"id\" : \"71e2360a-0db4-4d69-a7f2-0f20484387d1\" , \"body\" : \"Test comment!!\" , \"parent_id\" : null , \"reference_id\" : \"test-reference-id\" , \"created_at\" : \"2021-09-11T22:23:03.629850\" , \"user\" : null , \"mentions\" : [] } If you want to see the comment you just created, you can make this request: curl --request GET \\ --url 'https://comently.p.rapidapi.com/comments?reference_id=test-reference-id' \\ --header 'x-rapidapi-key: <your-token>' That endpoint lets you fetch all the comments related to a specific reference_id . Awesome, you know how to create basic comments, now lets check something better, how to create nested comments !","title":"Creating your first comment"},{"location":"delete-a-comment/","text":"For delete a comment it is very similar to update a comment, lets first create the comment we want to delete: curl --request POST \\ --url 'https://comently.p.rapidapi.com/comments' \\ --header 'x-rapidapi-key: <your-token>' \\ --data '{ \"body\": \"Test comment!!\", \"reference_id\": \"test-reference-id\", \"user_id\": \"123456789\" }' The resposne from that request is the following: { \"id\" : \"47003b9e-679e-412b-a070-bc3e82f8f890\" , \"body\" : \"Test comment!!\" , \"parent_id\" : null , \"reference_id\" : \"test-reference-id\" , \"created_at\" : \"2021-09-12T18:54:45.618530\" , \"user\" : { \"user_id\" : \"123456789\" , \"name\" : \"whitman\" }, \"mentions\" : [] } Then we just call the following endpoint to delete the comment, iserting the comment id as the path paramater: curl --request DELETE \\ --url 'https://comently.p.rapidapi.com/comments/47003b9e-679e-412b-a070-bc3e82f8f890' \\ --header 'x-rapidapi-key: <your-token>' \\ The permissions strategy for deleting comments is the same as described in Update a comment","title":"Delete a comment"},{"location":"intended-usage-of-the-api/","text":"In this section we will explain the usage of this service in a near real-life scenario, so you will be able to understand the design principles of the service! Context You are a Engineer working on a platform that distributes MOOCs (Like Coursera, Platzi, Udemy, etc.), you have a lot of technology in place for the different parts of the platform like payments, analytics, streaming of the contents, autheticantion, content management systems for your courses, etc. Suddenly one morning a product folk presented to the whole company a new feature that he wants to add to the platform, it is a comment box for each video of each course in the platform, that way the students will be able to interact beetween them and with the teachers! So, now is your reponsability to solve this problem. Exploring the solutions You start your research, and as you are a lazy bastard, the first thing you look for is a service that already do all this stuff for you, that way you will only integrate the solution and thats it! Probably the first one you will find is Disqus, it is the biggest platform for this kind of service right now, so what can go bad? You take a look to the ddocs and you realize that for integrate with them, it is requried to setup a few bit on the frontend and you will be ready to go! The problem is that now for create comments, your users will need to create a new account on Disqus, so you piss off, because for your company is alrady hard to convince an user to register on your own platform! This solution adds a lot of friction, this will never work for you. Now you are resignated after finding a couple of other services that offer the same as Disqus. You start thinking about a in-house solution for this feature, and you realize this will take a lot of work to implement, but you dont have the time, product team requires this feature asap, otherwise your platform will be left behind by the competition. After hours of research you find this obscure documentation in the middle of nowhere, and you realize it offers a balance beetween the two scenarios described above, it is a managed service, you you dont need care about the implementation, and at the same time you can integrate it with your existing platform, reusing you authentication and keeping your users happy because they only need to create on single account for everything in your platform, so lets explore this solution! Dive deeper into the solution After 30 minutes of reading the documentation you wrap your head aroudn how to implement this, the key points are the following: You will need to create a couple of endpoints in your API for normal CRUD operations for comments. It will be required that each time a new user is registered in your platform, you also register it on this comments service only using the basic information (user_id and name). You will take care of the permissions for each user. Thats it! you are ready to go! PD: Im a lazy bastard too, i faced the same problems described above, so i decided to create this API as a side project.","title":"Intended usage of the API"},{"location":"intended-usage-of-the-api/#context","text":"You are a Engineer working on a platform that distributes MOOCs (Like Coursera, Platzi, Udemy, etc.), you have a lot of technology in place for the different parts of the platform like payments, analytics, streaming of the contents, autheticantion, content management systems for your courses, etc. Suddenly one morning a product folk presented to the whole company a new feature that he wants to add to the platform, it is a comment box for each video of each course in the platform, that way the students will be able to interact beetween them and with the teachers! So, now is your reponsability to solve this problem.","title":"Context"},{"location":"intended-usage-of-the-api/#exploring-the-solutions","text":"You start your research, and as you are a lazy bastard, the first thing you look for is a service that already do all this stuff for you, that way you will only integrate the solution and thats it! Probably the first one you will find is Disqus, it is the biggest platform for this kind of service right now, so what can go bad? You take a look to the ddocs and you realize that for integrate with them, it is requried to setup a few bit on the frontend and you will be ready to go! The problem is that now for create comments, your users will need to create a new account on Disqus, so you piss off, because for your company is alrady hard to convince an user to register on your own platform! This solution adds a lot of friction, this will never work for you. Now you are resignated after finding a couple of other services that offer the same as Disqus. You start thinking about a in-house solution for this feature, and you realize this will take a lot of work to implement, but you dont have the time, product team requires this feature asap, otherwise your platform will be left behind by the competition. After hours of research you find this obscure documentation in the middle of nowhere, and you realize it offers a balance beetween the two scenarios described above, it is a managed service, you you dont need care about the implementation, and at the same time you can integrate it with your existing platform, reusing you authentication and keeping your users happy because they only need to create on single account for everything in your platform, so lets explore this solution!","title":"Exploring the solutions"},{"location":"intended-usage-of-the-api/#dive-deeper-into-the-solution","text":"After 30 minutes of reading the documentation you wrap your head aroudn how to implement this, the key points are the following: You will need to create a couple of endpoints in your API for normal CRUD operations for comments. It will be required that each time a new user is registered in your platform, you also register it on this comments service only using the basic information (user_id and name). You will take care of the permissions for each user. Thats it! you are ready to go! PD: Im a lazy bastard too, i faced the same problems described above, so i decided to create this API as a side project.","title":"Dive deeper into the solution"},{"location":"list-and-retrieve-comments/","text":"We already used the endpoint for list comments a few times, but now lets go deeper. List comments by reference_id curl --request GET \\ --url 'https://comently.p.rapidapi.com/comments?reference_id=test-reference-id' \\ --header 'x-rapidapi-key: <your-token>' You can pass the query parameter reference_id to fetch all the comments that are related/grouped. In the future we will support filtering by other params, like user_id or created_at , even text search on the comments body is planned. Get a single comment by id curl --request GET \\ --url 'https://comently.p.rapidapi.com/comments/<comment-id>' \\ --header 'x-rapidapi-key: <your-token>' Replace the path parameter with the comment id you want to retrieve. The response of this request will not include the sub-comments/replies.","title":"List and retrieve comments"},{"location":"list-and-retrieve-comments/#list-comments-by-reference_id","text":"curl --request GET \\ --url 'https://comently.p.rapidapi.com/comments?reference_id=test-reference-id' \\ --header 'x-rapidapi-key: <your-token>' You can pass the query parameter reference_id to fetch all the comments that are related/grouped. In the future we will support filtering by other params, like user_id or created_at , even text search on the comments body is planned.","title":"List comments by reference_id"},{"location":"list-and-retrieve-comments/#get-a-single-comment-by-id","text":"curl --request GET \\ --url 'https://comently.p.rapidapi.com/comments/<comment-id>' \\ --header 'x-rapidapi-key: <your-token>' Replace the path parameter with the comment id you want to retrieve. The response of this request will not include the sub-comments/replies.","title":"Get a single comment by id"},{"location":"mentions-in-comments/","text":"We support @mentions feature, if inside a comment body a user is @mentioned, we will account for it and return to you a list of the users that where mentioned, lets see how this works: First of all, for a @mention to be recognized it is requried that the mentioned users is registered in out API, so lets do that first: curl --request POST \\ --url 'https://comently.p.rapidapi.com/users' \\ --header 'x-rapidapi-key: <your-token>' \\ --data '{ \"user_id\": \"987654321\", \"name\": \"olbert\" }' Now we have our user registered, lets create the comment: curl --request POST \\ --url 'https://comently.p.rapidapi.com/comments' \\ --header 'x-rapidapi-key: <your-token>' \\ --data '{ \"body\": \"Hello @olbert!\", \"reference_id\": \"test-reference-id\" }' We will scan the comment body for @mentions and try to find those users. The response of the above request is the following: { \"id\" : \"16a41746-ddde-4254-8534-69ddad945623\" , \"body\" : \"Hello @olbert!\" , \"parent_id\" : null , \"reference_id\" : \"test-reference-id\" , \"created_at\" : \"2021-09-12T20:48:58.451501\" , \"user\" : null , \"mentions\" : [ { \"user_id\" : \"987654321\" , \"name\" : \"olbert\" } ] } So now you have a clear picture of who was mentioned in the comment, so then you for example trigger a notifications system from your backend, or do whatever you want with that information! The problem with this implementation is that now we do not support cases of duplicated names, so if you have two users with the same name, we will return all of them on the list of mentioned users. A possible mitigation for this is to give you the opportunity to provide a \"hint\" to our api about which users where mentioned, but that is not implemented yet.","title":"Mentions in comments"},{"location":"nested-comments/","text":"During the introduction of the API we mentioned that we support \"reddit-like commenting system\", so if you visited reddit before, you already know that reddit supports nested comments, that means you can comment on comments! Lets do it! it is really easy! it is the same request for create a comment, but we need to add a new field to the json body, the parent_id, the id of the comment that we want to reply to, but first lets create a comment, so we can reply to it. curl --request POST \\ --url https://comently.p.rapidapi.com/comments \\ --header 'x-rapidapi-key: <your-token>' \\ --data '{ \"body\": \"Test comment!!\", \"reference_id\": \"test-reference-id\" }' The response for that request was: { \"id\" : \"71e2360a-0db4-4d69-a7f2-0f20484387d1\" , \"body\" : \"Test comment!!\" , \"parent_id\" : null , \"reference_id\" : \"test-reference-id\" , \"created_at\" : \"2021-09-11T22:23:03.629850\" , \"user\" : null , \"mentions\" : [] } So, we extract the comment id from the response, in this case it is 71e2360a-0db4-4d69-a7f2-0f20484387d1 , so lets write a reply to that comment! curl --request POST \\ --url https://comently.p.rapidapi.com/comments \\ --header 'x-rapidapi-key: <your-token>' \\ --data '{ \"body\": \"Nested comment!!\", \"reference_id\": \"test-reference-id\", \"parent_id\": \"71e2360a-0db4-4d69-a7f2-0f20484387d1\", }' Now if we fetch by reference_id : curl --request GET \\ curl --request GET \\ --url 'https://comently.p.rapidapi.com/comments?reference_id=test-reference-id' \\ --header 'x-rapidapi-key: <your-token>' We get the following response: [ { \"id\" : \"71e2360a-0db4-4d69-a7f2-0f20484387d1\" , \"body\" : \"Test comment!!\" , \"parent_id\" : null , \"reference_id\" : \"test-reference-id\" , \"created_at\" : \"2021-09-11T22:53:08.152283\" , \"user\" : null , \"mentions\" : [], \"replies\" : [ { \"id\" : \"5e6b7896-481f-46be-8a64-cc8df95ea035\" , \"body\" : \"Nested comment!!\" , \"parent_id\" : \"71e2360a-0db4-4d69-a7f2-0f20484387d1\" , \"reference_id\" : \"test-reference-id\" , \"created_at\" : \"2021-09-11T22:53:23.303679\" , \"user\" : null , \"mentions\" : [], \"replies\" : [] } ] } ] Both comments are nested! We can repeat this process for get deeper comments on the tree. The maximum depth of the comments tree is 10 for now, but you can use less depth than the supported, in fact the nesting is optional, you can have an application that only supports zero levels of nesting.","title":"Nested comments"},{"location":"registering-users/","text":"This API has a couple of endpoints dedicated to users, where you can for example register an user. The porpouse is to be able to stablish a relationship between comments and their creators, the users of your platform. This will let you know who created a comment, also will enable our @mentions feature, we will talk about that later. First of all, you need to register an user! curl --request POST \\ --url https://comently.p.rapidapi.com/users \\ --header 'x-rapidapi-key: <your-token>' \\ --data '{ \"user_id\": \"123456789\", \"name\": \"whitman\" }' The user_id represent an unique identifier for the user inside your platform, this is a plain string, so you can use any format of string you already support in your own platform (uuid, MongoDb objectid, integers, etc) parsed as string. If inside your platform the unique identifier of your users is their nicknames, you can use them too. On the other side, we use the name parameter for look out for mentions of the user inside the comments, so when someone @mentions an user, we can know who is the user that was mentioned. This has some drawbacks, for example if you want to support users who have deplicated names, our mentions listener will not work properly on its own, we will talk about how to solve this situation later, now lets focus on the basics! Let go to the create comment with user section!","title":"Registering users"},{"location":"update-a-comment/","text":"Usually users wants to update the comments they write, lets do that with out API, first lets create a comment: curl --request POST \\ --url 'https://comently.p.rapidapi.com/comments' \\ --header 'x-rapidapi-key: <your-token>' \\ --data '{ \"body\": \"Test comment!!\", \"reference_id\": \"test-reference-id\", \"user_id\": \"123456789\" }' The resposne from that request is the following: { \"id\" : \"30503b9e-679e-412b-a070-bc3e82f8f36c\" , \"body\" : \"Test comment!!\" , \"parent_id\" : null , \"reference_id\" : \"test-reference-id\" , \"created_at\" : \"2021-09-12T18:54:45.618530\" , \"user\" : { \"user_id\" : \"123456789\" , \"name\" : \"whitman\" }, \"mentions\" : [] } Now lets update the comment, we take the id of the comment we created and use it in the following request: curl --request PATCH \\ --url 'https://comently.p.rapidapi.com/comments/30503b9e-679e-412b-a070-bc3e82f8f36c' \\ --header 'x-rapidapi-key: <your-token>' \\ --data '{ \"body\": \"Updated comment!!\" }' You only need to send the new body for the comment! Now our comment is updated: { \"id\" : \"30503b9e-679e-412b-a070-bc3e82f8f36c\" , \"body\" : \"Updated comment!!\" , \"parent_id\" : null , \"reference_id\" : \"test-reference-id\" , \"created_at\" : \"2021-09-12T18:54:45.618530\" , \"user\" : { \"user_id\" : \"123456789\" , \"name\" : \"whitman\" }, \"mentions\" : [] } Update permissions It is probable that you want to ensure only creators of the comments can update them, our API does not support managing permissions, you are at charge of that. But you it is easy to do from your Backend: When an user request to update a comment, you fetch the comment from our API using the endpoint described in List and retrieve comments You check if the user requesting the change is user in the comment retrieved in the previous step If the user is the creator of the comment, you can update the comment If the user is not the creator of the comment, you return back a permissions error","title":"Update a comment"},{"location":"update-a-comment/#update-permissions","text":"It is probable that you want to ensure only creators of the comments can update them, our API does not support managing permissions, you are at charge of that. But you it is easy to do from your Backend: When an user request to update a comment, you fetch the comment from our API using the endpoint described in List and retrieve comments You check if the user requesting the change is user in the comment retrieved in the previous step If the user is the creator of the comment, you can update the comment If the user is not the creator of the comment, you return back a permissions error","title":"Update permissions"}]}